<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gate Kontrol Paneli</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; margin: 0; padding: 20px; min-height: 100vh; display: flex; justify-content: center; align-items: center; text-align: center; flex-direction: column; background-color: #f0f2f5; }
        .container { background: white; padding: 25px 40px; border-radius: 12px; box-shadow: 0 4px 20px rgba(0,0,0,0.1); width: 100%; max-width: 480px; }
        .screen { display: none; width: 100%; }
        #connectScreen { display: block; }
        button, select { width: 100%; padding: 15px; background-color: #007AFF; color: white; border: none; cursor: pointer; font-size: 18px; font-weight: 500; border-radius: 10px; transition: background-color 0.3s ease; margin-bottom: 10px; }
        button:hover, select:hover { background-color: #005ecb; }
        .input-group { margin-bottom: 20px; text-align: left; }
        .input-group label { display: block; margin-bottom: 8px; font-size: 16px; color: #333; }
        .input-group input, .input-group select { box-sizing: border-box; width: 100%; padding: 12px; border: 1px solid #ddd; border-radius: 6px; font-size: 16px; }
        .slider-wrapper { margin: 25px 0; }
        .slider-wrapper .value { font-weight: bold; color: #007AFF; }
        .device-name-display { font-size: 20px; font-weight: 600; margin-bottom: 20px; color: #1c1c1e; }
        .toast { position: fixed; bottom: 20px; left: 50%; transform: translateX(-50%); background-color: rgba(0,0,0,0.75); color: white; padding: 12px 24px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.2); display: none; z-index: 1000; }
        .pin-status-text { font-size: 12px; margin-top: 5px; display: block; }
    </style>
</head>
<body>
    <div class="container">
        <h2 id="deviceNameDisplay" style="display: none;">Gate Kontrol Paneli</h2>

        <div id="connectScreen" class="screen">
            <button id="connectButton">Gate Cihazına Bağlan</button>
        </div>

        <div id="pinScreen" class="screen">
            <p>Ayarlara erişmek için lütfen PIN girin:</p>
            <div class="input-group">
                <label for="pinInput">PIN:</label>
                <input type="password" id="pinInput" maxlength="4" pattern="\d{4}" inputmode="numeric" />
            </div>
            <button id="submitPinButton">PIN'i Gönder</button>
        </div>

        <div id="mainContent" class="screen">
            <div id="settingsContent">
                <div class="input-group">
                    <label for="deviceNameInput">Cihaz Adı:</label>
                    <input type="text" id="deviceNameInput" value="" />
                </div>
                 <div class="slider-wrapper">
                    <label for="closeTimeoutSlider">Oto. Kapanma Süresi (Sinyal Kaybı): <span id="closeTimeoutValue" class="value">30</span>s</label>
                    <input type="range" id="closeTimeoutSlider" min="10" max="600" step="5" value="30" />
                </div>
                 <div class="slider-wrapper">
                    <label for="preCloseWarningSlider">Kapanma Öncesi Uyarı Süresi: <span id="preCloseWarningValue" class="value">5</span>s</label>
                    <input type="range" id="preCloseWarningSlider" min="1" max="15" step="1" value="5" />
                </div>
                <div class="input-group">
                     <label for="operationModeSelect">Çalışma Modu:</label>
                     <select id="operationModeSelect">
                         <option value="0">Normal (Otomatik)</option>
                         <option value="1">Sürekli Açık Tut</option>
                         <option value="2">Sürekli Kapalı Tut</option>
                         <option value="3">Servis Dışı</option>
                     </select>
                </div>
                 <div class="input-group">
                    <label for="authRequiredCheckbox" style="display:inline-block;">Güvenli Mod (HMAC Gerekli):</label>
                    <input type="checkbox" id="authRequiredCheckbox" style="width:auto; vertical-align: middle;" checked />
                </div>
                <div class="input-group">
                    <label for="newPinInput">Yeni PIN (Opsiyonel, 4 haneli sayı) veya sıfırlamak için boş bırakın:</label>
                    <input type="text" id="newPinInput" maxlength="4" pattern="\d{0,4}" inputmode="numeric" placeholder="Yeni PIN" />
                    <span id="pinStatus" class="pin-status-text"></span>
                </div>
                <button id="saveSettingsButton">Ayarları Kaydet</button>
            </div>
            <button id="disconnectButton" style="background-color: #6c757d; margin-top: 20px;">Bağlantıyı Kes</button>
        </div>
    </div>
    <div id="toast" class="toast"></div>

    <script>
    // UUID'ler
    const GATE_SERVICE_UUID = "e3a1b2f0-5f4d-4c8a-bd2f-8e6a7f3b9c0d";
    const CHAR_SETTINGS_UUID = "a1d2f3e4-5678-4b9a-b3c2-9d8e7f6a5b4c";
    const CHAR_PIN_AUTH_UUID = "b2c3d4e5-6789-4f0b-c1d2-a3b4c5d6e7f8";
    const CHAR_STATUS_UUID   = "c3d4e5f6-7890-4a1c-b2d3-e4f5a6b7c8d9";

    // Global değişkenler
    let bleDevice, settingsCharacteristic, pinAuthCharacteristic, statusCharacteristic;
    let toastTimeout, isPinInputModified = false;

    // UI Element Referansları
    const ui = {
        connectScreen: document.getElementById('connectScreen'),
        pinScreen: document.getElementById('pinScreen'),
        mainContent: document.getElementById('mainContent'),
        deviceNameDisplay: document.getElementById('deviceNameDisplay'),
        connectButton: document.getElementById('connectButton'),
        disconnectButton: document.getElementById('disconnectButton'),
        pinInput: document.getElementById('pinInput'),
        submitPinButton: document.getElementById('submitPinButton'),
        deviceNameInput: document.getElementById('deviceNameInput'),
        closeTimeoutSlider: document.getElementById('closeTimeoutSlider'),
        closeTimeoutValue: document.getElementById('closeTimeoutValue'),
        preCloseWarningSlider: document.getElementById('preCloseWarningSlider'),
        preCloseWarningValue: document.getElementById('preCloseWarningValue'),
        operationModeSelect: document.getElementById('operationModeSelect'),
        authRequiredCheckbox: document.getElementById('authRequiredCheckbox'),
        newPinInput: document.getElementById('newPinInput'),
        pinStatus: document.getElementById('pinStatus'),
        saveSettingsButton: document.getElementById('saveSettingsButton'),
        toast: document.getElementById('toast')
    };

    // Event Listeners
    ui.connectButton.addEventListener('click', connectToDevice);
    ui.disconnectButton.addEventListener('click', disconnectFromDevice);
    ui.submitPinButton.addEventListener('click', submitPin);
    ui.saveSettingsButton.addEventListener('click', writeSettingsToDevice);
    ui.closeTimeoutSlider.addEventListener('input', e => ui.closeTimeoutValue.innerText = e.target.value);
    ui.preCloseWarningSlider.addEventListener('input', e => ui.preCloseWarningValue.innerText = e.target.value);
    ui.newPinInput.addEventListener('input', () => isPinInputModified = true);
    
    // --- Fonksiyonlar ---
    function showScreen(screenId) {
        document.querySelectorAll('.screen').forEach(s => s.style.display = 'none');
        document.getElementById(screenId).style.display = 'block';
    }

    async function connectToDevice() {
        try {
            showToast("Cihaz aranıyor...");
            bleDevice = await navigator.bluetooth.requestDevice({ filters: [{ services: [GATE_SERVICE_UUID] }] });
            showToast("Cihaza bağlanılıyor...");
            bleDevice.addEventListener('gattserverdisconnected', onDisconnected);
            const server = await bleDevice.gatt.connect();
            const service = await server.getPrimaryService(GATE_SERVICE_UUID);
            settingsCharacteristic = await service.getCharacteristic(CHAR_SETTINGS_UUID);
            pinAuthCharacteristic = await service.getCharacteristic(CHAR_PIN_AUTH_UUID);
            statusCharacteristic = await service.getCharacteristic(CHAR_STATUS_UUID);

            await statusCharacteristic.startNotifications();
            statusCharacteristic.addEventListener('characteristicvaluechanged', handleStatusNotifications);
            
            ui.deviceNameDisplay.innerText = bleDevice.name || 'GATE';
            ui.deviceNameDisplay.style.display = 'block';
            await checkPinRequirement();
        } catch (error) {
            console.error("Bağlantı hatası:", error);
            showToast("Bağlantı kurulamadı.", "error");
        }
    }

    function onDisconnected() { /* ... */ } // Önceki cevaplardaki gibi
    async function disconnectFromDevice() { /* ... */ } // Önceki cevaplardaki gibi

    async function checkPinRequirement() {
        try {
            const value = await pinAuthCharacteristic.readValue();
            const response = JSON.parse(new TextDecoder().decode(value));
            if (response.pinRequired) {
                showScreen('pinScreen');
            } else {
                await showMainContentAndReadSettings();
            }
        } catch(error) { showToast("PIN durumu okunamadı.", "error"); }
    }
    
    async function submitPin() {
        const pin = ui.pinInput.value;
        if (pin.length !== 4) { showToast("PIN 4 haneli olmalı.", "error"); return; }
        try {
            await pinAuthCharacteristic.writeValue(new TextEncoder().encode(pin));
            // Cihazdan AUTH_SUCCESS bildirimi bekleniyor
        } catch(error) { showToast("PIN gönderilemedi.", "error"); }
    }

    async function showMainContentAndReadSettings() {
        showScreen('mainContent');
        await readCurrentSettings();
    }

    async function readCurrentSettings() {
        try {
            const value = await settingsCharacteristic.readValue();
            const settings = JSON.parse(new TextDecoder().decode(value));
            if(settings.error) {
                showToast("Yetki gerekli: " + settings.error, "error");
                showScreen('pinScreen');
                return;
            }
            
            ui.deviceNameInput.value = settings.deviceName || '';
            ui.closeTimeoutSlider.value = settings.closeTimeout || 30;
            ui.closeTimeoutValue.innerText = settings.closeTimeout || 30;
            ui.preCloseWarningSlider.value = settings.preCloseWarning || 5;
            ui.preCloseWarningValue.innerText = settings.preCloseWarning || 5;
            ui.operationModeSelect.value = settings.opMode || 0;
            ui.authRequiredCheckbox.checked = settings.authReq !== false;
            ui.pinStatus.innerText = settings.pinExists ? "Mevcut PIN ayarlı." : "Mevcut PIN ayarlı değil.";
            ui.pinStatus.style.color = settings.pinExists ? "#007AFF" : "#f44336";

            ui.newPinInput.value = '';
            isPinInputModified = false;
            
            showToast("Ayarlar başarıyla yüklendi.", "success");
        } catch (error) {
            console.error("Ayarlar okunurken hata:", error);
            showToast("Ayarlar okunamadı. PIN yanlış olabilir.", "error");
            showScreen('pinScreen');
        }
    }

    async function writeSettingsToDevice() {
        try {
            const settingsPayload = {
                deviceName: ui.deviceNameInput.value,
                closeTimeout: parseInt(ui.closeTimeoutSlider.value, 10),
                preCloseWarning: parseInt(ui.preCloseWarningSlider.value, 10),
                opMode: parseInt(ui.operationModeSelect.value, 10),
                authReq: ui.authRequiredCheckbox.checked
            };
            if (isPinInputModified) {
                const newPin = ui.newPinInput.value;
                if (newPin.length > 0 && (newPin.length !== 4 || !/^\d+$/.test(newPin))) {
                    showToast("Yeni PIN 4 haneli sayı olmalı.", "error"); return;
                }
                settingsPayload.pinCode = newPin;
            }

            await settingsCharacteristic.writeValue(new TextEncoder().encode(JSON.stringify(settingsPayload)));
            // Başarı mesajı için cihazdan gelen bildirimi bekle
        } catch (error) { console.error("Ayarlar gönderilirken hata:", error); showToast("Ayarlar gönderilemedi!", "error"); }
    }

    function handleStatusNotifications(event) {
        const statusMsg = new TextDecoder().decode(event.target.value);
        console.log("Cihazdan durum: ", statusMsg);
        showToast(`Durum: ${statusMsg}`, "info");

        if (statusMsg === "AUTH_SUCCESS") {
            showMainContentAndReadSettings();
        } else if (statusMsg === "AUTH_FAILED") {
            ui.pinInput.value = '';
            showToast("Yanlış PIN!", "error");
        } else if (statusMsg === "SETTINGS_UPDATED") {
            showToast("Ayarlar başarıyla kaydedildi.", "success");
            if (isPinInputModified) {
                ui.newPinInput.value = '';
                isPinInputModified = false;
            }
        }
    }
    
    function showToast(message, type = "info") { /* ... */ }
    </script>
</body>
</html>